name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Detect package manager in the subfolder --------------------------
      - name: Detect package manager
        id: detect-package-manager
        run: |
          cd my-next-site
          if [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          elif [ -f "package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager"
            exit 1

      # 2) Setup Node with the discovered package manager
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      # 3) Configure GitHub Pages for Next.js
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file
          # and disable server side image optimization.
          static_site_generator: next

      # 4) Restore cache (point it at subfolder)
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: my-next-site/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('my-next-site/**/package-lock.json', 'my-next-site/**/yarn.lock') }}-${{ hashFiles('my-next-site/**/*.js', 'my-next-site/**/*.jsx', 'my-next-site/**/*.ts', 'my-next-site/**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('my-next-site/**/package-lock.json', 'my-next-site/**/yarn.lock') }}-

      # 5) Install dependencies from subfolder
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: tp10-website

      # 6) Build Next.js from subfolder
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        working-directory: tp10-website

      # 7) Upload the built artifacts from subfolder (e.g. out/)
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: tp10-website/out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
